{"ast":null,"code":"var _jsxFileName = \"/Users/ljh/Desktop/\\u1111\\u1169\\u1110\\u1173\\u1111\\u1169\\u11AF\\u1105\\u1175\\u110B\\u1169/5.\\u110B\\u1168\\u1109\\u116E\\u11AF\\u110B\\u1174\\u110C\\u1165\\u11AB\\u1103\\u1161\\u11BC/sac/src/components/CustomCalendar.jsx\",\n  _s = $RefreshSig$();\nimport Calendar from 'react-calendar';\nimport { useState } from 'react';\nimport moment from 'moment';\nimport 'react-calendar/dist/Calendar.css';\nimport '../css/scheduleCalendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CustomCalendar({\n  totalData,\n  startDate\n}) {\n  _s();\n  // 현재 선택된 날짜 상태관리\n  const [nowDate, setNowDate] = useState(new Date());\n\n  // 날짜 클릭시 현재 날짜로 설정\n  const handleDayClick = nowDate => {\n    setNowDate(nowDate);\n  };\n  const datesToHighlight = startDate.map(date => moment(date).format('YYYY-MM-DD'));\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    // 해당 날짜가 datesToHighlight 배열에 있는지 확인\n    if (view === 'month' && datesToHighlight.find(dDate => moment(dDate).isSame(date, 'day'))) {\n      return 'highlight';\n    }\n  };\n  const [mark, setMark] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customCalendar\",\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: setNowDate // 날짜가 변경시 nowDate 업데이트\n      ,\n      value: nowDate // 현재 선택된 날짜\n      ,\n      onClickDay: handleDayClick // 날짜를 클릭하면 handleDayClick 함수를 호출\n      ,\n      calendarType: \"gregory\",\n      formatDay: (locale, date) => moment(date).format('DD'),\n      tileClassName: tileClassName,\n      tileContent: ({\n        date,\n        view\n      }) => {\n        let html = [];\n        if (datesToHighlight.find(x => x === moment(date).format('YYYY-MM-DD'))) {\n          const matchingData = totalData.find(data => moment(data.startDate).format('YYYY-MM-DD') === moment(date).format('YYYY-MM-DD'));\n          const title = matchingData ? matchingData.title : 'No title';\n          html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this)]\n          }, moment(date).format('YYYY-MM-DD'), true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this));\n        }\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: html\n        }, void 0, false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomCalendar, \"keIUjhNKZEZBaGqOydw5+eVWYLk=\");\n_c = CustomCalendar;\nvar _c;\n$RefreshReg$(_c, \"CustomCalendar\");","map":{"version":3,"names":["Calendar","useState","moment","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomCalendar","totalData","startDate","_s","nowDate","setNowDate","Date","handleDayClick","datesToHighlight","map","date","format","tileClassName","view","find","dDate","isSame","mark","setMark","className","children","onChange","value","onClickDay","calendarType","formatDay","locale","tileContent","html","x","matchingData","data","title","push","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ljh/Desktop/포트폴리오/5.예술의전당/sac/src/components/CustomCalendar.jsx"],"sourcesContent":["import Calendar from 'react-calendar';\nimport { useState } from 'react';\nimport moment from 'moment';\nimport 'react-calendar/dist/Calendar.css';\nimport '../css/scheduleCalendar.css';\n\nexport default function CustomCalendar({ totalData, startDate }) {\n  // 현재 선택된 날짜 상태관리\n  const [nowDate, setNowDate] = useState(new Date());\n\n  // 날짜 클릭시 현재 날짜로 설정\n  const handleDayClick = (nowDate) => {\n    setNowDate(nowDate);\n  };\n\n  const datesToHighlight = startDate.map((date) => moment(date).format('YYYY-MM-DD'));\n\n  const tileClassName = ({ date, view }) => {\n    // 해당 날짜가 datesToHighlight 배열에 있는지 확인\n    if (view === 'month' && datesToHighlight.find((dDate) => moment(dDate).isSame(date, 'day'))) {\n      return 'highlight';\n    }\n  };\n\n  const [mark, setMark] = useState([]);\n\n  return (\n    <div className='customCalendar'>\n      <Calendar\n        onChange={setNowDate} // 날짜가 변경시 nowDate 업데이트\n        value={nowDate} // 현재 선택된 날짜\n        onClickDay={handleDayClick} // 날짜를 클릭하면 handleDayClick 함수를 호출\n        calendarType='gregory'\n        formatDay={(locale, date) => moment(date).format('DD')}\n        tileClassName={tileClassName}\n        tileContent={({ date, view }) => {\n          let html = [];\n          if (datesToHighlight.find((x) => x === moment(date).format('YYYY-MM-DD'))) {\n            const matchingData = totalData.find(\n              (data) =>\n                moment(data.startDate).format('YYYY-MM-DD') === moment(date).format('YYYY-MM-DD')\n            );\n            const title = matchingData ? matchingData.title : 'No title';\n            html.push(\n              <div key={moment(date).format('YYYY-MM-DD')}>\n                <div className='mark'></div>\n                <div>{title}</div>\n              </div>\n            );\n          }\n          return <>{html}</>;\n        }}\n      />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}